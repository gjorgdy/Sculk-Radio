plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}


repositories {
    maven { url = 'https://maven.maxhenkel.de/repository/public' }
    maven {
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = 'https://maven.parchmentmc.org/' }
    maven { url 'https://maven.fallenbreath.me/releases' }
    maven {
        name = "Local Maven"
        url = uri('../local-maven')
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Plugin for conditional mixins
    modImplementation 'me.fallenbreath:conditional-mixin-fabric:0.6.4'
    include 'me.fallenbreath:conditional-mixin-fabric:0.6.4'
    // Audio Player compatibility
    modRuntimeOnly "de.maxhenkel.voicechat:voicechat-api:${project.voicechat_api_version}:fabric-stub"
    modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${project.voicechat_mod_version}"
    modCompileOnly "de.maxhenkel.voicechat:voicechat-api:${project.voicechat_api_version}"
    modImplementation "de.maxhenkel.audioplayer:audioplayer:${project.audioplayer_mod_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version,
                "voicechat_api_version": project.voicechat_api_version,
                "voicechat_mod_version": project.voicechat_mod_version,
                "audioplayer_mod_version": project.audioplayer_mod_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            url = uri('../local-maven')
        }
    }
}

static String getModrinthToken() {
    return new File('.env')
            .readLines()
            .findAll { it?.trim() && !it.trim().startsWith('#') }
            .collect { it.split('=') }
            .find { it[0] == 'MODRINTH_TOKEN' }[1]
}

static String readChangelog() {
    return new File('changelog.md')
            .readLines()
            .join('\n')
}

modrinth {
    token = getModrinthToken()
    projectId = project.mod_id
    versionNumber = "${project.version}"
    changelog = readChangelog()
    versionType = project.mod_release_type
    uploadFile = remapJar
    gameVersions = [project.minecraft_version]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api" // Creates a new required dependency on Fabric API
        optional.version "audioplayer", "fabric-${project.audioplayer_mod_version}" // Creates a new optional dependency on this specific version of Sodium
    }
}

